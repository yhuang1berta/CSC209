Script started on 2020-01-14 17:39:03-0500
~/209_repo/t02$ gdb overflow
GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from overflow...done.
(gdb) break main
Breakpoint 1 at 0x742: file overflow.c, line 6.
(gdb) break 36
Breakpoint 2 at 0x959: file overflow.c, line 36.
(gdb) contin[K[K[K[K[K[Krun
Starting program: /student/huang853/209_repo/t02/overflow 

Breakpoint 1, main () at overflow.c:6
6	int main() {
(gdb) continue
Continuing.
Address of the variables:
7fffffffe410 -> &after[0]
7fffffffe414 -> &after[1]
7fffffffe418 -> &after[2]
7fffffffe41c -> &after[3]
7fffffffe400 -> &a[0]
7fffffffe404 -> &a[1]
7fffffffe408 -> &a[2]
7fffffffe40c -> &a[3]
7fffffffe3f0 -> &before[0]
7fffffffe3f4 -> &before[1]
7fffffffe3f8 -> &before[2]
7fffffffe3fc -> &before[3]
7fffffffe3ec -> &i
7fffffffe3e8 -> &index

Initial values:
i = 0
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}


Breakpoint 2, main () at overflow.c:36
36	    for (i = 0; i < OVERFLOW; i++) {
(gdb) display after[0]
1: after[0] = 10
(gdb) display &(d[Kafter[0])
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) next
37	        a[i] = i * 10;
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
38	        printf("i = %d\n", i);
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
i = 0
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
a = {0, 0, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
37	        a[i] = i * 10;
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
38	        printf("i = %d\n", i);
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
i = 1
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
a = {0, 10, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
37	        a[i] = i * 10;
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
38	        printf("i = %d\n", i);
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
i = 2
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
a = {0, 10, 20, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
37	        a[i] = i * 10;
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
38	        printf("i = %d\n", i);
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
i = 3
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
a = {0, 10, 20, 30}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
37	        a[i] = i * 10;
1: after[0] = 10
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
38	        printf("i = %d\n", i);
1: after[0] = 40
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
i = 4
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after[0] = 40
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after[0] = 40
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
a = {0, 10, 20, 30}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after[0] = 40
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
after = {40, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after[0] = 40
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
44	    return 0;
1: after[0] = 40
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
45	}
1: after[0] = 40
2: &(after[0]) = (int *) 0x7fffffffe410
(gdb) 
__libc_start_main (main=0x55555555473a <main>, argc=1, argv=0x7fffffffe518, 
    init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, 
    stack_end=0x7fffffffe508) at ../csu/libc-start.c:344
344	../csu/libc-start.c: No such file or directory.
(gdb) quit
A debugging session is active.

	Inferior 1 [process 14135] will be killed.

Quit anyway? (y or n) y
~/209_repo/t02$ exit
exit

Script done on 2020-01-14 17:40:04-0500
